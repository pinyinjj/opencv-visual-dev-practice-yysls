name: Build and Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      minor_version:
        description: '指定次版本号（中间位），例如 2 表示 v1.2.x；留空则沿用当前次版本号'
        required: false
        type: string

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Get version info
      id: version
      shell: pwsh
      run: |
        # Get latest tag
        $latestTag = git describe --tags --abbrev=0 2>$null
        if (-not $latestTag) {
          # Default base version if no tags exist yet
          $latestTag = "v1.0.0"
        }
        Write-Host "Latest tag: $latestTag"
        
        # Extract version number
        $versionNumber = $latestTag -replace "v", ""
        $versionParts = $versionNumber -split "\."
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1]
        $patch = [int]$versionParts[2]
        
        # Optional: user-specified minor version (middle number)
        $inputMinor = "${{ github.event.inputs.minor_version }}"
        if ($inputMinor -and $inputMinor -ne "") {
          $minor = [int]$inputMinor
          Write-Host "Using specified minor version: $minor"
        }

        # Default behavior: increment patch version
        $patch++
        $newVersion = "v$major.$minor.$patch"
        Write-Host "Auto incrementing patch version: $newVersion"
        
        echo "VERSION=$newVersion" >> $env:GITHUB_OUTPUT
        echo "TAG_NAME=$newVersion" >> $env:GITHUB_OUTPUT
        echo "RELEASE_NAME=YYSLS OpenCV Template $newVersion" >> $env:GITHUB_OUTPUT
        echo "VERSION_NUMBER=$($newVersion -replace 'v', '')" >> $env:GITHUB_OUTPUT
    
    - name: Create version file
      shell: pwsh
      run: |
        echo "VERSION=${{ steps.version.outputs.VERSION_NUMBER }}" > version.txt
        echo "BUILD_DATE=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> version.txt
        echo "COMMIT_SHA=${{ github.sha }}" >> version.txt
    
    - name: Build executable
      run: |
        python build_exe.py
    
    - name: Create release assets
      shell: pwsh
      run: |
        # Create release directory (remove if exists first)
        if (Test-Path "release") {
          Remove-Item "release" -Recurse -Force
        }
        New-Item -ItemType Directory -Name "release"
        
        # Debug: List dist directory contents
        Write-Host "Contents of dist directory:"
        Get-ChildItem "dist\" | ForEach-Object { Write-Host "  $($_.Name)" }
        
        # Copy executable - check for any .exe file in dist directory
        $exeFiles = Get-ChildItem "dist\*.exe"
        if ($exeFiles.Count -gt 0) {
          $exeFile = $exeFiles[0]
          Write-Host "Found executable: $($exeFile.Name)"
          copy "dist\$($exeFile.Name)" "release\yysls-opencv-template-${{ steps.version.outputs.VERSION_NUMBER }}.exe"
        } else {
          Write-Error "No executable found in dist directory"
          Write-Host "Available files in dist:"
          Get-ChildItem "dist\" | ForEach-Object { Write-Host "  $($_.Name)" }
          exit 1
        }
        
        # Copy config and templates
        copy "crop_config.json" "release\"
        xcopy "templates" "release\templates\" /E /I
        
        # Skip README generation per request
    
    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.version.outputs.TAG_NAME }} -m "Release ${{ steps.version.outputs.TAG_NAME }}"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/pinyinjj/opencv-visual-dev-practice-yysls.git
        git push origin ${{ steps.version.outputs.TAG_NAME }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.TAG_NAME }}
        name: ${{ steps.version.outputs.RELEASE_NAME }}
        body: |
          ## 使用方法
          1. 下载 `yysls-opencv-template-${{ steps.version.outputs.VERSION_NUMBER }}.exe`
          2. 下载 `crop_config.json` 和 `templates/` 文件夹
          3. 将所有文件放在同一目录
          4. 运行可执行文件

          ## 更新日志
          -
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
